print(The mean is, mean(x))
clear
num <- 1:10
num
class(num)
as.character(num)
class(as.character(num))
x <- rnorm(1000)
summary(x)
quantiles <- summary(x)
q1 <- quantiles[2]
q1 <- quantiles[2]
q3 <- quantiles[5]
q1
q3
iqr <- q3 - q1
iqr
lower.bound <- q1 - 1.5*iqr
lower.bound
upper.bound <- q3 + 1.5*iqr
upper.bound
# Load the necessary package to open the SAS data file.
library(foreign)
# Load the data file into R.
dat <- read.xport("demo_e.xpt")
# Save the names of the desired variables as strings.
variables <- c("SEQN", "RIDAGEMN", "RIDRETH1", "DMDEDUC2", "DMDMARTL")
# Create a new data set with only the desired variables and the ID for each subject.
new.dat <- dat[,variables]
# Load the necessary package to open the SAS data file.
library(foreign)
# Load the data file into R.
dat <- read.xport("demo_e.xpt")
# Save the names of the desired variables as strings.
variables <- c("SEQN", "RIDAGEMN", "RIDRETH1", "DMDEDUC2", "DMDMARTL")
# Create a new data set with only the desired variables and the ID for each subject.
new.dat <- dat[,variables]
setwd("C:/Users/owner/Dropbox/Ph.D/Intro Data Analysis Course/Sample Code")
# Load the necessary package to open the SAS data file.
library(foreign)
# Load the data file into R.
dat <- read.xport("demo_e.xpt")
# Save the names of the desired variables as strings.
variables <- c("SEQN", "RIDAGEMN", "RIDRETH1", "DMDEDUC2", "DMDMARTL")
# Create a new data set with only the desired variables and the ID for each subject.
new.dat <- dat[,variables]
?write.csv
write.csv(new.dat, file="NHANES0708.csv")
data()
data(sleep)
sleep
data(women)
women
data(uspop)
uspop
data(swiss)
swiss
data(sunspot.year)
sunspot.year
data(longley)
longley
data(ChickWeight)
ChickWeight
data(diamonds)
require(ggplot2)
data(package = .packages(all.available = TRUE))
require(AppliedPredictiveModeling)
data(diagnosis)
data(AlzheimerDisease)
AlzheimerDisease
dat
head(dat)
data(diamonds)
diamonds
head(dat)
head(diamonds)
data(hepatic)
head(injury)
rm(list=ls())
x <- rnorm(100)
mean(x)
sd(x)
var(x)
?rbern
?rbinom
rbinom(1, 1, 0.5)
rbinom(1, 10, 0.5)
rbinom(100, 1, 0.5)
?rpois
rpois(100, lambda=10)
y <- rbinom(100, size=1, prob=0.5)
summary(y)
var(y)
z <- rpois(100, lambda=10)
summary(z)
table(z)
?table
table(y,z)
w <- rbinom(100, size=3, prob=0.5)
table(w)
table(y,w)
prop.test(y,w)
?prop.test
chisq.test(w)
chisq.test(w,y)
chisq.test(w)
chisq.test(z)
z
table(z)
w <- rbinom(100, size=10, prob=0.5)
w
table(w)
w <- rbinom(100, size=12, prob=0.5)
table(w)
table(z)
table(z,y)
```{r}
chisq.test(z)
chisq.test(z,y)
```
prop.test(z,y)
prop.test(table(z,y))
chisq.test(z,y)
chisq.test(table(z,y))
?fisher.test
fisher.test(z,y)
?hist
hist(x, main="Sample Normal Distribution", xlab="Sample Values")
hist(x, main="Sample Normal Distribution", xlab="Sample Values", breaks=5)
hist(y)
?density
hist(x)
density(x)
lines(density(x))
?hist
hist(x, freq=F)
lines(density(x))
as.factor(y)
y.factor <- as.factor(y)
dat <- cbind(x, y.factor)
hist(x~y.factor)
class(x)
dat$x
class(dat)
dat <- as.data.frame(cbind(x, y.factor))
hist(x, data=dat)
hist(dat$x ~ dat$y.factor)
hist(dat$x)
x[which(y=0)]
x[which(y=0),]
x[which(y==0)]
dat <- as.data.frame(cbind(x, y))
density0 <- density(x[which(y==0)])
density1 <- density(x[which(y==1)])
hist(x)
lines(density0, col="red")
lines(density1, col="blue")
dat <- as.data.frame(cbind(x, y))
density0 <- density(x[which(y==0)])
density1 <- density(x[which(y==1)])
hist(x, freq=FALSE)
lines(density0, col="red")
lines(density1, col="blue")
source('~/.active-rstudio-document', echo=TRUE)
?opts_template
test <- 10*(1:10)
test
test <- 30:35)
test
which(test==32)
test <- 30:35
test
which(test==32)
which(test==32 | test==34)
?boxplot
boxplot(x)
?boxplot
y.factor
boxplot(x ~ y.factor)
boxplot(y)
source('~/.active-rstudio-document', echo=TRUE)
stem(z)
?stem
stem(x)
qqnorm(x)
qqnorm(z)
qqnorm(y)
qqplot(x,z)
qqnorm(x)
?qqnorm
v <- rnorm(100, mean=10, sd=1)
qqplot(x, v)
qqplot(x, z)
qqplot(x,y)
qqplot(x, z)
corr(x,y,z)
cor(x,y,z)
?cor
?plot
x.new <- rnorm(100)
x.linear <- rnorm(100, mean=7, sd=1.75)
x.dat <- as.data.frame(cbind(x, x.new, x.linear))
plot(x.dat)
plot(x, x.linear)
plot(x, x.linear, xlab="Standard Normal", ylab="Non-Standard Normal", pch=2, lty=6, col=512)
lines(h=0)
abline(h=0)
abline(v=0)
abline(v=0, col=512)
abline(v=0, lty=6)
abline(v=0, lty=3)
plot(x, x.linear, xlab="Standard Normal", ylab="Non-Standard Normal", pch=2, lty=6, col=512)
abline(v=0, lty=3)
plot(x,y)
plot(y,x)
plot(y,x, jitter=0.1)
plot(y,x, jitter)
?plot
plot(y, jitter(x))
plot(jitter(y), jitter(x))
plot(jitter(x), jitter(y))
require(ggplot2)
data(diamonds)
head(diamonds)
class(diamonds$color)
class(diamonds$clarity)
class(diamonds$cut)
plot(x.dat)
hist(depth)
hist(diamonds$depth)
qqnorm(diamonds$depth)
qqnorm(diamonds$price)
qqnorm(diamonds$table)
qqnorm(log(diamonds$depth))
qqnorm(log(diamonds$price))
anova(diamonds$price ~ diamonds$color)
?anova
interaction.plot(diamonds$z, diamonds$color, diamonds$depth)
fit <- aov(x ~ y.factor)
layout(matrix(c(1,2,3,4), 2, 2))
plot(fit)
layout(par=mfrow(1,1))
par(mfrow=c(1,1))
plot(fit)
anova(aov)
anova(fit)
interaction.plot(x,y)
interaction.plot(x,y.factor)
interaction.plot(y.factor,x)
plotmeans(x~y.factor)
install.packages("gplots")
require("gplots")
plotmeans(x~y.factor)
?plotmeans
par(mfrow=c(2,2))
plot(fit)
scatter.smooth(x, x.linear, xlab="Standard Normal", ylab="Non-Standard Normal", pch=2, col=512)
par(mfrow=c(1,1))
scatter.smooth(x, x.linear, xlab="Standard Normal", ylab="Non-Standard Normal", pch=2, col=512)
scatter.smooth(x, x.linear, xlab="Standard Normal", ylab="Non-Standard Normal", pch=2, col=512, span=1/2)
scatter.smooth(x, x.linear, xlab="Standard Normal", ylab="Non-Standard Normal", pch=2, col=512, span=1/4)
scatter.smooth(x, x.linear, xlab="Standard Normal", ylab="Non-Standard Normal", pch=2, col=512, span=2/3, evaluation=10)
scatter.smooth(x, x.linear, xlab="Standard Normal", ylab="Non-Standard Normal", pch=2, col=512, span=2/3, evaluation=50)
scatter.smooth(x, x.linear, xlab="Standard Normal", ylab="Non-Standard Normal", pch=2, col=512, span=2/3, evaluation=100)
plot(x, x.linear, xlab="Standard Normal",
ylab="Non-Standard Normal", pch=2, col=30)
abline(v=0, lty=3)
fit
summary(fit)
?rmultinom
pr <- c(1,3,6,10) # normalization not necessary for generation
rmultinom(10, 20, prob = pr)
rmultinom(10, 8, prob=0.5)
rmultinom(10, 2, prob=0.5)
obesity <- sample(1000, 0:3, replace=T)
obesity
sample(1000, 0:3, replace=T)
obesity <- sample(0:3, 1000, replace=T)
sample(0:3, 1000, replace=T)
summary(10*obesity + rnorm(1000, mean=110, sd=3))
hist(10*obesity + rnorm(1000, mean=110, sd=3))
hist(10*obesity + rnorm(1000, mean=110, sd=3))
qqnorm(10*obesity + rnorm(1000, mean=110, sd=3))
?factor
obesity.f <- factor(obesity, levels=c("Underweight", "Normal", "Overweight", "Obese"))
obesity.f
obesity.f[1]
obesity.f <- factor(obesity, levels=c("Underweight", "Normal", "Overweight", "Obese"), ordered=T)
head(obesity.f)
obesity.f <- factor(obesity, levels=c(0,1,2,3), labels=c("Underweight", "Normal", "Overweight", "Obese"))
head(obesity.f)
bp <- 10*obesity + rnorm(100, mean=110, sd=2)
plot(obesity, bp)
plot(jitter(obesity), jitter(bp))
par(mfrow=c(2,2))
hist(obesity)
boxplot(bp ~ obesity.f)
qqnorm(obesity)
plot(jitter(obesity), jitter(bp), xlab="Obesity (Jittered)", ylab="Blood Pressure (Jittered)")
hist(log(obesity))
hist(log(bp))
par(mfrow=c(2,2))
hist(log(bp))
boxplot(log(bp) ~ obesity.f)
qqnorm(log(bp))
plot(jitter(obesity), jitter(log(bp)), xlab="Obesity (Jittered)", ylab="Blood Pressure (Jittered)")
par(mfrow=c(2,2))
hist(log(bp), main="Blood Pressure")
boxplot(log(bp) ~ obesity.f)
qqnorm(log(bp))
scatter.smooth(jitter(obesity), jitter(log(bp)), xlab="Obesity (Jittered)", ylab="Blood Pressure (Jittered)")
data()
data(mpg)
head(mpg)
qplot(cty, hwy, data=mpg)
qplot(log(cty), log(hwy), data=mpg)
class(mpg$cyl)
class(mpg$drv)
levels(mpg$drv)
qplot(hwy ~ drv, data=mpg)
qplot(hwy ~ mpg$drv, data=mpg)
qplot(hwy, data=mpg)
qplot(cty, hwy, data=mpg, colour=audi)
qplot(cty, hwy, data=mpg, colour=manufacturer)
qplot(cty, hwy, data=mpg, colour=class)
qplot(cty, drv, geom="boxplot")
qplot(cty, drv, data=mpg, geom="boxplot")
qplot(drv, cty, data=mpg, geom="boxplot")
qplot(city, data=mpg, geom=density)
qplot(city, data=mpg, geom="density")
qplot(cty, data=mpg, geom="density")
qplot(cty, hwy, data=mpg, geom=c("point", "smooth"))
qplot(cty, hwy, data=mpg, geom=c("point", "smooth"), shape=drv)
qplot(hwy, data=mpg, geom="histogram", binwidth=5)
qplot(hwy, data=mpg, geom="histogram", binwidth=1)
qplot(cty, data=mpg, geom="density"), colour=drv)
qplot(cty, data=mpg, geom="density", colour=drv)
